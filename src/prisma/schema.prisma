generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  fullName        String
  username        String         @unique
  avatar          String?
  email           String?        @unique
  phone           String?        @unique
  password        String
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  followedBy      User[]         @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs   String[]       @db.ObjectId
  following       User[]         @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs    String[]       @db.ObjectId
  createdAt       DateTime       @default(now())
  refreshTokens   RefreshToken[] @relation("UserRefreshTokens")
  story           Story[]
  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  userId    String   @db.ObjectId
  user      User     @relation("UserRefreshTokens", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  file      String // URL of the file in S3
  caption   String?
  location  String?
  isPrivate Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
  fileUrl   String
  caption   String
  hashTag   String[]
  mentions  String[]
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Conversation {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  participantsId String[]  @db.ObjectId
  participants   User[]    @relation(fields: [participantsId], references: [id])
  lastMessageId  String?   @unique @db.ObjectId
  lastMessage    Message?  @relation(fields: [lastMessageId], references: [id], name: "lastMessage", onDelete: NoAction, onUpdate: NoAction)
  messages       Message[] @relation(name: "conversation")
  lastActivityAt DateTime  @default(now())

  @@index([participantsId], map: "idx_participants")
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String        @db.ObjectId
  senderId       String        @db.ObjectId
  content        String
  readBy         String[]      @db.ObjectId
  createdAt      DateTime      @default(now())
  conversation   Conversation  @relation(fields: [conversationId], references: [id], name: "conversation", onDelete: NoAction, onUpdate: NoAction)
  lastMessage    Conversation? @relation(name: "lastMessage")

  @@index([conversationId], map: "idx_conversation")
  @@index([senderId], map: "idx_sender")
  @@index([createdAt], map: "idx_createdAt")
  @@index([readBy], map: "idx_readBy")
}
