/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type { Context } from './../contextType'

declare global {
    interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {}

export interface NexusGenScalars {
    String: string
    Int: number
    Float: number
    Boolean: boolean
    ID: string
}

export interface NexusGenObjects {
    Comment: {
        // root type
        content?: string | null // String
        createdAt?: string | null // String
        id?: string | null // ID
    }
    Like: {
        // root type
        createdAt?: string | null // String
        id?: string | null // ID
    }
    Post: {
        // root type
        content?: string | null // String
        createdAt?: string | null // String
        id?: string | null // ID
        imageUrl: string // String!
        updatedAt?: string | null // String
    }
    Query: {}
    User: {
        // root type
        createdAt?: string | null // String
        email?: string | null // String
        id?: string | null // ID
        username?: string | null // String
    }
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
    Comment: {
        // field return type
        author: NexusGenRootTypes['User'] | null // User
        content: string | null // String
        createdAt: string | null // String
        id: string | null // ID
        post: NexusGenRootTypes['Post'] | null // Post
    }
    Like: {
        // field return type
        createdAt: string | null // String
        id: string | null // ID
        post: NexusGenRootTypes['Post'] | null // Post
        user: NexusGenRootTypes['User'] | null // User
    }
    Post: {
        // field return type
        author: NexusGenRootTypes['User'] | null // User
        comments: Array<NexusGenRootTypes['Comment'] | null> | null // [Comment]
        content: string | null // String
        createdAt: string | null // String
        id: string | null // ID
        imageUrl: string // String!
        likes: Array<NexusGenRootTypes['Like'] | null> | null // [Like]
        updatedAt: string | null // String
    }
    Query: {
        // field return type
        like: NexusGenRootTypes['Like'] | null // Like
        user: NexusGenRootTypes['User'] | null // User
    }
    User: {
        // field return type
        comments: Array<NexusGenRootTypes['Comment'] | null> | null // [Comment]
        createdAt: string | null // String
        email: string | null // String
        followedBy: Array<NexusGenRootTypes['User'] | null> | null // [User]
        following: Array<NexusGenRootTypes['User'] | null> | null // [User]
        id: string | null // ID
        likes: Array<NexusGenRootTypes['Like'] | null> | null // [Like]
        posts: Array<NexusGenRootTypes['Post'] | null> | null // [Post]
        username: string | null // String
    }
}

export interface NexusGenFieldTypeNames {
    Comment: {
        // field return type name
        author: 'User'
        content: 'String'
        createdAt: 'String'
        id: 'ID'
        post: 'Post'
    }
    Like: {
        // field return type name
        createdAt: 'String'
        id: 'ID'
        post: 'Post'
        user: 'User'
    }
    Post: {
        // field return type name
        author: 'User'
        comments: 'Comment'
        content: 'String'
        createdAt: 'String'
        id: 'ID'
        imageUrl: 'String'
        likes: 'Like'
        updatedAt: 'String'
    }
    Query: {
        // field return type name
        like: 'Like'
        user: 'User'
    }
    User: {
        // field return type name
        comments: 'Comment'
        createdAt: 'String'
        email: 'String'
        followedBy: 'User'
        following: 'User'
        id: 'ID'
        likes: 'Like'
        posts: 'Post'
        username: 'String'
    }
}

export interface NexusGenArgTypes {
    Query: {
        like: {
            // args
            id?: string | null // String
        }
        user: {
            // args
            id?: string | null // String
        }
    }
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects

export type NexusGenInputNames = never

export type NexusGenEnumNames = never

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames = keyof NexusGenScalars

export type NexusGenUnionNames = never

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never

export type NexusGenAbstractsUsingStrategyResolveType = never

export type NexusGenFeaturesConfig = {
    abstractTypeStrategies: {
        isTypeOf: false
        resolveType: true
        __typename: false
    }
}

export interface NexusGenTypes {
    context: Context
    inputTypes: NexusGenInputs
    rootTypes: NexusGenRootTypes
    inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars
    argTypes: NexusGenArgTypes
    fieldTypes: NexusGenFieldTypes
    fieldTypeNames: NexusGenFieldTypeNames
    allTypes: NexusGenAllTypes
    typeInterfaces: NexusGenTypeInterfaces
    objectNames: NexusGenObjectNames
    inputNames: NexusGenInputNames
    enumNames: NexusGenEnumNames
    interfaceNames: NexusGenInterfaceNames
    scalarNames: NexusGenScalarNames
    unionNames: NexusGenUnionNames
    allInputTypes:
        | NexusGenTypes['inputNames']
        | NexusGenTypes['enumNames']
        | NexusGenTypes['scalarNames']
    allOutputTypes:
        | NexusGenTypes['objectNames']
        | NexusGenTypes['enumNames']
        | NexusGenTypes['unionNames']
        | NexusGenTypes['interfaceNames']
        | NexusGenTypes['scalarNames']
    allNamedTypes:
        | NexusGenTypes['allInputTypes']
        | NexusGenTypes['allOutputTypes']
    abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
    abstractTypeMembers: NexusGenAbstractTypeMembers
    objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf
    abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType
    features: NexusGenFeaturesConfig
}

declare global {
    interface NexusGenPluginTypeConfig<TypeName extends string> {}
    interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
    interface NexusGenPluginFieldConfig<
        TypeName extends string,
        FieldName extends string,
    > {}
    interface NexusGenPluginInputFieldConfig<
        TypeName extends string,
        FieldName extends string,
    > {}
    interface NexusGenPluginSchemaConfig {}
    interface NexusGenPluginArgConfig {}
}
